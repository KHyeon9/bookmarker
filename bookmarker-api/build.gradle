plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.6'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.cloud.tools.jib' version '3.4.5'
	// id 'com.bmuschko.docker-spring-boot-application' version '9.4.0'
}

group = 'com.education'
version = '0.0.1-SNAPSHOT'
description = 'Spring Boot REST API Server'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	// devtools는 prod 빌드 때 제외
	if (!project.hasProperty("prod")) {
		developmentOnly 'org.springframework.boot:spring-boot-devtools'
	}
	// test
	// BOM (Bill of Materials) 을 적용할 때 사용합니다.
	// BOM은 여러 라이브러리들의 버전 일관성을 관리해주는 역할
	testImplementation platform('org.testcontainers:testcontainers-bom:1.20.2')
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}



// Jib 설정
jib {
	to {
		image = "mrk0607/${project.name}:3.0"
		auth {
			username = 'mrk0607'
			password = '도커 액세스 토큰'
		}
	}
	container {
		mainClass = 'com.education.BookmarkerApiApplication' // 스프링부트 main 클래스
		ports = ['8080'] // 컨테이너 노출 포트
	}
}

// Buildpacks을 통한 이미지 배포
// dockerfile 필요 x, springboot의 buildpack을 사용해 이미지 생성함
//bootBuildImage {
//	imageName = "mrk0607/${project.name}:3.0"   // Docker 이미지 이름/태그
//}

// Docker Gradle plugin 설정
//docker {
//	springBootApplication {
//		baseImage = 'eclipse-temurin:21-jdk-jammy'
//		images = ['mrk0607/bookmarker-api:2.0']
//		// Maven의 dockerFileDir과 동일 하지만 플러그인으로 별도 지정 필요 x
//		// dockerFile = file("${projectDir}/Dockerfile")
//	}
//}
// Docker 이미지 빌드 전에 bootJar 실행
//tasks.named('dockerBuildImage') {
//	dependsOn bootJar
//}

tasks.named('test') {
	useJUnitPlatform()
}
